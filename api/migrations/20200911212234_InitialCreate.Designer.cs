// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using SS.Api.Models.DB;

namespace SS.Api.Migrations
{
    [DbContext(typeof(appdbContext))]
    [Migration("20200911212234_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SS.Api.Models.DB.Assignment", b =>
                {
                    b.Property<Guid>("AssignmentId")
                        .HasColumnName("assignment_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourtRoleId")
                        .HasColumnName("court_role_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourtroomId")
                        .HasColumnName("courtroom_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<Guid?>("EscortRunId")
                        .HasColumnName("escort_run_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<Guid?>("JailRoleId")
                        .HasColumnName("jail_role_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OtherAssignId")
                        .HasColumnName("other_assign_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkSectionCode")
                        .IsRequired()
                        .HasColumnName("work_section_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourtRoleId")
                        .HasName("ix_assignment_court_role");

                    b.HasIndex("CourtroomId")
                        .HasName("ix_assignment_courtroom");

                    b.HasIndex("EscortRunId")
                        .HasName("ix_assignment_escort_run");

                    b.HasIndex("JailRoleId")
                        .HasName("ix_assignment_jail_role");

                    b.HasIndex("LocationId")
                        .HasName("ix_assignment_location");

                    b.HasIndex("OtherAssignId")
                        .HasName("ix_assignment_other_assign_role");

                    b.HasIndex("WorkSectionCode")
                        .HasName("ix_assignment_work_section_code");

                    b.ToTable("assignment","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AudSheriffDuty", b =>
                {
                    b.Property<Guid>("SheriffDutyId")
                        .HasColumnName("sheriff_duty_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DutyId")
                        .HasColumnName("duty_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDtm")
                        .HasColumnName("end_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OperationCode")
                        .IsRequired()
                        .HasColumnName("operation_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("OperationDtm")
                        .HasColumnName("operation_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OperationUserId")
                        .HasColumnName("operation_user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SheriffId")
                        .HasColumnName("sheriff_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDtm")
                        .HasColumnName("start_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnName("transaction_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SheriffDutyId", "RevisionCount")
                        .HasName("pk_aud_shrdty");

                    b.ToTable("aud_sheriff_duty","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthApiScope", b =>
                {
                    b.Property<Guid>("ApiScopeId")
                        .HasColumnName("api_scope_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("ScopeCode")
                        .IsRequired()
                        .HasColumnName("scope_code")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ScopeName")
                        .IsRequired()
                        .HasColumnName("scope_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("SystemScopeInd")
                        .HasColumnName("system_scope_ind")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ApiScopeId")
                        .HasName("pk_api_scope");

                    b.ToTable("auth_api_scope","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthFrontendScope", b =>
                {
                    b.Property<Guid>("FrontendScopeId")
                        .HasColumnName("frontend_scope_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("ScopeCode")
                        .IsRequired()
                        .HasColumnName("scope_code")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ScopeName")
                        .IsRequired()
                        .HasColumnName("scope_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("SystemScopeInd")
                        .HasColumnName("system_scope_ind")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FrontendScopeId")
                        .HasName("pk_frontend_scope");

                    b.ToTable("auth_frontend_scope","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthFrontendScopeApi", b =>
                {
                    b.Property<Guid>("FrontendScopeApiId")
                        .HasColumnName("frontend_scope_api_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiScopeId")
                        .HasColumnName("api_scope_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FrontendScopeId")
                        .HasColumnName("frontend_scope_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FrontendScopeApiId")
                        .HasName("pk_frontend_scope_api");

                    b.HasIndex("ApiScopeId");

                    b.HasIndex("FrontendScopeId");

                    b.ToTable("auth_frontend_scope_api","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthFrontendScopePermission", b =>
                {
                    b.Property<Guid>("FrontendScopePermissionId")
                        .HasColumnName("frontend_scope_permission_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid>("FrontendScopeId")
                        .HasColumnName("frontend_scope_id")
                        .HasColumnType("uuid");

                    b.Property<string>("PermissionCode")
                        .IsRequired()
                        .HasColumnName("permission_code")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FrontendScopePermissionId")
                        .HasName("pk_frontend_scope_permission");

                    b.HasIndex("FrontendScopeId");

                    b.ToTable("auth_frontend_scope_permission","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnName("role_code")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("role_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<short?>("SystemRoleInd")
                        .HasColumnName("system_role_ind")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RoleId")
                        .HasName("pk_role");

                    b.ToTable("auth_role","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthRoleApiScope", b =>
                {
                    b.Property<Guid>("RoleApiScopeId")
                        .HasColumnName("role_api_scope_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiScopeId")
                        .HasColumnName("api_scope_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RoleApiScopeId")
                        .HasName("pk_role_api_scope");

                    b.HasIndex("ApiScopeId");

                    b.HasIndex("RoleId");

                    b.ToTable("auth_role_api_scope","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthRoleFrontendScope", b =>
                {
                    b.Property<Guid>("RoleFrontendScopeId")
                        .HasColumnName("role_frontend_scope_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FrontendScopeId")
                        .HasColumnName("frontend_scope_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RoleFrontendScopeId")
                        .HasName("pk_role_frontend_scope");

                    b.HasIndex("FrontendScopeId");

                    b.HasIndex("RoleId");

                    b.ToTable("auth_role_frontend_scope","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthRolePermission", b =>
                {
                    b.Property<Guid>("RolePermissionId")
                        .HasColumnName("role_permission_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApiScopePermissionId")
                        .HasColumnName("api_scope_permission_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FrontendScopePermissionId")
                        .HasColumnName("frontend_scope_permission_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<Guid?>("RoleApiScopeId")
                        .HasColumnName("role_api_scope_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleFrontendScopeId")
                        .HasColumnName("role_frontend_scope_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RolePermissionId")
                        .HasName("pk_role_permission");

                    b.HasIndex("FrontendScopePermissionId");

                    b.HasIndex("RoleApiScopeId");

                    b.HasIndex("RoleFrontendScopeId");

                    b.HasIndex("RoleId");

                    b.ToTable("auth_role_permission","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DefaultLocationId")
                        .HasColumnName("default_location_id")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<Guid?>("SheriffId")
                        .HasColumnName("sheriff_id")
                        .HasColumnType("uuid");

                    b.Property<string>("SiteminderId")
                        .HasColumnName("siteminder_id")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SystemAccountInd")
                        .HasColumnName("system_account_ind")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAuthId")
                        .HasColumnName("user_auth_id")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("UserId")
                        .HasName("pk_user");

                    b.HasIndex("SheriffId");

                    b.ToTable("auth_user","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthUserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .HasColumnName("user_role_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<Guid?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("UserRoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("LocationId")
                        .HasName("ix_location");

                    b.HasIndex("RoleId")
                        .HasName("ix_role");

                    b.HasIndex("UserId")
                        .HasName("ix_user");

                    b.ToTable("auth_user_role","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.CourtRoleCode", b =>
                {
                    b.Property<Guid>("CourtRoleId")
                        .HasColumnName("court_role_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CourtRoleCode1")
                        .HasColumnName("court_role_code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CourtRoleName")
                        .HasColumnName("court_role_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<Guid?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CourtRoleId")
                        .HasName("pk_court_role_code");

                    b.HasIndex("CourtRoleCode1")
                        .IsUnique()
                        .HasName("court_role_code_loc_isnull_idx")
                        .HasFilter("(location_id IS NULL)");

                    b.HasIndex("LocationId");

                    b.HasIndex("CourtRoleCode1", "LocationId")
                        .IsUnique()
                        .HasName("court_role_code_loc_notnull_idx")
                        .HasFilter("(location_id IS NOT NULL)");

                    b.ToTable("court_role_code","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Courtroom", b =>
                {
                    b.Property<Guid>("CourtroomId")
                        .HasColumnName("courtroom_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CourtroomCode")
                        .HasColumnName("courtroom_code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CourtroomName")
                        .HasColumnName("courtroom_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<Guid?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CourtroomId");

                    b.HasIndex("CourtroomCode")
                        .IsUnique()
                        .HasName("courtroom_loc_isnull_idx")
                        .HasFilter("(location_id IS NULL)");

                    b.HasIndex("CourtroomName")
                        .HasName("ix_courtroom_name");

                    b.HasIndex("LocationId");

                    b.HasIndex("CourtroomCode", "LocationId")
                        .IsUnique()
                        .HasName("courtroom_loc_notnull_idx")
                        .HasFilter("(location_id IS NOT NULL)");

                    b.ToTable("courtroom","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Databasechangelog", b =>
                {
                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnName("author")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Contexts")
                        .HasColumnName("contexts")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Dateexecuted")
                        .HasColumnName("dateexecuted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeploymentId")
                        .HasColumnName("deployment_id")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Exectype")
                        .IsRequired()
                        .HasColumnName("exectype")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnName("filename")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnName("id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Labels")
                        .HasColumnName("labels")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Liquibase")
                        .HasColumnName("liquibase")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Md5sum")
                        .HasColumnName("md5sum")
                        .HasColumnType("character varying(35)")
                        .HasMaxLength(35);

                    b.Property<int>("Orderexecuted")
                        .HasColumnName("orderexecuted")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .HasColumnName("tag")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.ToTable("databasechangelog");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Databasechangeloglock", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<bool>("Locked")
                        .HasColumnName("locked")
                        .HasColumnType("boolean");

                    b.Property<string>("Lockedby")
                        .HasColumnName("lockedby")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Lockgranted")
                        .HasColumnName("lockgranted")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("databasechangeloglock");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Duty", b =>
                {
                    b.Property<Guid>("DutyId")
                        .HasColumnName("duty_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnName("assignment_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DutyRecurrenceId")
                        .HasColumnName("duty_recurrence_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDtm")
                        .HasColumnName("end_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<DateTime>("StartDtm")
                        .HasColumnName("start_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DutyId");

                    b.HasIndex("AssignmentId")
                        .HasName("ix_dty_asn");

                    b.HasIndex("DutyRecurrenceId")
                        .HasName("ix_dty_dtyrc");

                    b.ToTable("duty","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.DutyRecurrence", b =>
                {
                    b.Property<Guid>("DutyRecurrenceId")
                        .HasColumnName("duty_recurrence_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnName("assignment_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DaysBitmap")
                        .HasColumnName("days_bitmap")
                        .HasColumnType("numeric(10,0)")
                        .HasComment("1=mo,2=tu,4=we,8=th,16=fr,32=sa,64=su");

                    b.Property<DateTime>("EffectiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("effective_date")
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("time with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal>("SheriffsRequired")
                        .HasColumnName("sheriffs_required")
                        .HasColumnType("numeric(2,0)");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("time with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DutyRecurrenceId");

                    b.HasIndex("AssignmentId")
                        .HasName("ix_dtyrc_asn");

                    b.ToTable("duty_recurrence","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.EscortRun", b =>
                {
                    b.Property<Guid>("EscortRunId")
                        .HasColumnName("escort_run_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<string>("EscortRunCode")
                        .HasColumnName("escort_run_code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("EscortRunName")
                        .HasColumnName("escort_run_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<Guid?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EscortRunId");

                    b.HasIndex("EscortRunCode")
                        .IsUnique()
                        .HasName("escort_run_loc_isnull_idx")
                        .HasFilter("(location_id IS NULL)");

                    b.HasIndex("LocationId");

                    b.HasIndex("EscortRunCode", "LocationId")
                        .IsUnique()
                        .HasName("escort_run_loc_notnull_idx")
                        .HasFilter("(location_id IS NOT NULL)");

                    b.ToTable("escort_run","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.GenderCode", b =>
                {
                    b.Property<string>("GenderCode1")
                        .HasColumnName("gender_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GenderCode1")
                        .HasName("pk_gndr");

                    b.ToTable("gender_code","shersched");

                    b.HasComment("Gender Code captures the standard system values for gender     Male     Female     Other");
                });

            modelBuilder.Entity("SS.Api.Models.DB.JailRoleCode", b =>
                {
                    b.Property<Guid>("JailRoleId")
                        .HasColumnName("jail_role_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<string>("JailRoleCode1")
                        .HasColumnName("jail_role_code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("JailRoleName")
                        .HasColumnName("jail_role_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<Guid?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("JailRoleId")
                        .HasName("pk_jail_role_code");

                    b.HasIndex("JailRoleCode1")
                        .IsUnique()
                        .HasName("jail_role_code_loc_isnull_idx")
                        .HasFilter("(location_id IS NULL)");

                    b.HasIndex("LocationId");

                    b.HasIndex("JailRoleCode1", "LocationId")
                        .IsUnique()
                        .HasName("jail_role_code_loc_notnull_idx")
                        .HasFilter("(location_id IS NOT NULL)");

                    b.ToTable("jail_role_code","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Leave", b =>
                {
                    b.Property<Guid>("LeaveId")
                        .HasColumnName("leave_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CancelledDtm")
                        .HasColumnName("cancelled_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("time with time zone");

                    b.Property<string>("LeaveCancelReasonCode")
                        .HasColumnName("leave_cancel_reason_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LeaveCode")
                        .IsRequired()
                        .HasColumnName("leave_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LeaveSubCode")
                        .IsRequired()
                        .HasColumnName("leave_sub_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("PartialDayInd")
                        .HasColumnName("partial_day_ind")
                        .HasColumnType("integer");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<Guid>("SheriffId")
                        .HasColumnName("sheriff_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("time with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LeaveId");

                    b.HasIndex("LeaveCancelReasonCode");

                    b.HasIndex("SheriffId");

                    b.HasIndex("LeaveCode", "LeaveSubCode");

                    b.ToTable("leave","shersched");

                    b.HasComment("Leave captures data related to absence from regular duty for one or more full days.");
                });

            modelBuilder.Entity("SS.Api.Models.DB.LeaveCancelReasonCode", b =>
                {
                    b.Property<string>("LeaveCancelReasonCode1")
                        .HasColumnName("leave_cancel_reason_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LeaveCancelReasonCode1")
                        .HasName("pk_lvcr");

                    b.ToTable("leave_cancel_reason_code","shersched");

                    b.HasComment("Leave Cancel Reason Code captures the reasons for cancellation of leave, for BI and auditing purposes. Initial values are     - Operational Demands     - Personal Decision    - Entry Error");
                });

            modelBuilder.Entity("SS.Api.Models.DB.LeaveCode", b =>
                {
                    b.Property<string>("LeaveCode1")
                        .HasColumnName("leave_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LeaveCode1")
                        .HasName("pk_lvcd");

                    b.ToTable("leave_code","shersched");

                    b.HasComment("Leave Type Code captures the different categories of leave being managed. Initial types are     Leave     Training");
                });

            modelBuilder.Entity("SS.Api.Models.DB.LeaveSubCode", b =>
                {
                    b.Property<string>("LeaveCode")
                        .HasColumnName("leave_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LeaveSubCode1")
                        .HasColumnName("leave_sub_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LeaveCode", "LeaveSubCode1")
                        .HasName("pk_lvsbcd");

                    b.ToTable("leave_sub_code","shersched");

                    b.HasComment("Leave Type Sub Code captures the different types of leave being managed in each category. Initial types are     Leave -     STIP (Short Term Illness)     Leave -     Annual Leave     Leave -     Special Leave     Training -  Training");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JustinCode")
                        .HasColumnName("justin_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("JustinId")
                        .HasColumnName("justin_id")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LocationCd")
                        .IsRequired()
                        .HasColumnName("location_cd")
                        .HasColumnType("character varying(5)")
                        .HasComment("business key")
                        .HasMaxLength(5);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnName("location_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentLocationId")
                        .HasColumnName("parent_location_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegionId")
                        .HasColumnName("region_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LocationId");

                    b.HasIndex("LocationCd")
                        .IsUnique()
                        .HasName("uk_locn_cd");

                    b.HasIndex("ParentLocationId")
                        .HasName("ix_locn_prt");

                    b.HasIndex("RegionId");

                    b.ToTable("location","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.OtherAssignCode", b =>
                {
                    b.Property<Guid>("OtherAssignId")
                        .HasColumnName("other_assign_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<Guid?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("uuid");

                    b.Property<string>("OtherAssignCode1")
                        .HasColumnName("other_assign_code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("OtherAssignName")
                        .HasColumnName("other_assign_name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OtherAssignId")
                        .HasName("pk_other_assign_code");

                    b.HasIndex("LocationId");

                    b.HasIndex("OtherAssignCode1")
                        .IsUnique()
                        .HasName("other_assign_code_loc_isnull_idx")
                        .HasFilter("(location_id IS NULL)");

                    b.HasIndex("OtherAssignCode1", "LocationId")
                        .IsUnique()
                        .HasName("other_assign_code_loc_notnull_idx")
                        .HasFilter("(location_id IS NOT NULL)");

                    b.ToTable("other_assign_code","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Region", b =>
                {
                    b.Property<Guid>("RegionId")
                        .HasColumnName("region_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<NpgsqlPolygon?>("Location")
                        .HasColumnName("location")
                        .HasColumnType("polygon");

                    b.Property<string>("RegionCd")
                        .IsRequired()
                        .HasColumnName("region_cd")
                        .HasColumnType("character varying(12)")
                        .HasComment("business key")
                        .HasMaxLength(12);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnName("region_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RegionId");

                    b.HasIndex("RegionCd")
                        .IsUnique()
                        .HasName("uk_rgn_cd");

                    b.ToTable("region","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Sheriff", b =>
                {
                    b.Property<Guid>("SheriffId")
                        .HasColumnName("sheriff_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .HasColumnName("alias")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("BadgeNo")
                        .IsRequired()
                        .HasColumnName("badge_no")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CurrentLocationId")
                        .HasColumnName("current_location_id")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GenderCode")
                        .HasColumnName("gender_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid>("HomeLocationId")
                        .HasColumnName("home_location_id")
                        .HasColumnType("uuid")
                        .HasComment("Permanent location for a sheriff");

                    b.Property<string>("ImageUrl")
                        .HasColumnName("image_url")
                        .HasColumnType("character varying(200)")
                        .HasComment("TBD how to store a Sheriff photo")
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("SheriffRankCode")
                        .IsRequired()
                        .HasColumnName("sheriff_rank_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SheriffId");

                    b.HasIndex("BadgeNo")
                        .IsUnique()
                        .HasName("uk_shrf_bdgn");

                    b.HasIndex("CurrentLocationId")
                        .HasName("ix_shr_crlocn");

                    b.HasIndex("GenderCode");

                    b.HasIndex("HomeLocationId")
                        .HasName("ix_shr_hmlocn");

                    b.HasIndex("SheriffRankCode")
                        .HasName("ix_shr_rkcd");

                    b.ToTable("sheriff","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.SheriffDuty", b =>
                {
                    b.Property<Guid>("SheriffDutyId")
                        .HasColumnName("sheriff_duty_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DutyId")
                        .HasColumnName("duty_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDtm")
                        .HasColumnName("end_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<Guid?>("SheriffId")
                        .HasColumnName("sheriff_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDtm")
                        .HasColumnName("start_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SheriffDutyId");

                    b.HasIndex("DutyId")
                        .HasName("ix_shrdty_dty");

                    b.HasIndex("SheriffId")
                        .HasName("ix_shrdty_shr");

                    b.ToTable("sheriff_duty","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.SheriffLocation", b =>
                {
                    b.Property<Guid>("SheriffLocationId")
                        .HasColumnName("sheriff_location_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("time without time zone");

                    b.Property<Guid?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("uuid");

                    b.Property<int>("PartialDayInd")
                        .HasColumnName("partial_day_ind")
                        .HasColumnType("integer");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<Guid?>("SheriffId")
                        .HasColumnName("sheriff_id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("numeric(3,0)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("time without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SheriffLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SheriffId");

                    b.ToTable("sheriff_location","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.SheriffRankCode", b =>
                {
                    b.Property<string>("SheriffRankCode1")
                        .HasColumnName("sheriff_rank_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<int>("RankOrder")
                        .HasColumnName("rank_order")
                        .HasColumnType("integer");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SheriffRankCode1")
                        .HasName("pk_shrkcd");

                    b.ToTable("sheriff_rank_code","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Shift", b =>
                {
                    b.Property<Guid>("ShiftId")
                        .HasColumnName("shift_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnName("assignment_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDtm")
                        .HasColumnName("end_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<Guid?>("SheriffId")
                        .HasColumnName("sheriff_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDtm")
                        .HasColumnName("start_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkSectionCode")
                        .HasColumnName("work_section_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("ShiftId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("LocationId")
                        .HasName("ix_shft_locn");

                    b.HasIndex("SheriffId")
                        .HasName("ix_shft_shr");

                    b.HasIndex("WorkSectionCode")
                        .HasName("ix_shft_wsc");

                    b.ToTable("shift","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.WorkSectionCode", b =>
                {
                    b.Property<string>("WorkSectionCode1")
                        .HasColumnName("work_section_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedDtm")
                        .HasColumnName("created_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnName("effective_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("date");

                    b.Property<decimal>("RevisionCount")
                        .HasColumnName("revision_count")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDtm")
                        .HasColumnName("updated_dtm")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("WorkSectionCode1")
                        .HasName("pk_wksccd");

                    b.ToTable("work_section_code","shersched");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Assignment", b =>
                {
                    b.HasOne("SS.Api.Models.DB.CourtRoleCode", "CourtRole")
                        .WithMany("Assignment")
                        .HasForeignKey("CourtRoleId")
                        .HasConstraintName("fk_court_role_id");

                    b.HasOne("SS.Api.Models.DB.Courtroom", "Courtroom")
                        .WithMany("Assignment")
                        .HasForeignKey("CourtroomId")
                        .HasConstraintName("fk_courtroom_id");

                    b.HasOne("SS.Api.Models.DB.EscortRun", "EscortRun")
                        .WithMany("Assignment")
                        .HasForeignKey("EscortRunId")
                        .HasConstraintName("fk_escort_run_id");

                    b.HasOne("SS.Api.Models.DB.JailRoleCode", "JailRole")
                        .WithMany("Assignment")
                        .HasForeignKey("JailRoleId")
                        .HasConstraintName("fk_jail_role_id");

                    b.HasOne("SS.Api.Models.DB.Location", "Location")
                        .WithMany("Assignment")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_id")
                        .IsRequired();

                    b.HasOne("SS.Api.Models.DB.OtherAssignCode", "OtherAssign")
                        .WithMany("Assignment")
                        .HasForeignKey("OtherAssignId")
                        .HasConstraintName("fk_other_assign_id");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthFrontendScopeApi", b =>
                {
                    b.HasOne("SS.Api.Models.DB.AuthApiScope", "ApiScope")
                        .WithMany("AuthFrontendScopeApi")
                        .HasForeignKey("ApiScopeId")
                        .HasConstraintName("fk_api_scope_id")
                        .IsRequired();

                    b.HasOne("SS.Api.Models.DB.AuthFrontendScope", "FrontendScope")
                        .WithMany("AuthFrontendScopeApi")
                        .HasForeignKey("FrontendScopeId")
                        .HasConstraintName("fk_frontend_scope_id")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthFrontendScopePermission", b =>
                {
                    b.HasOne("SS.Api.Models.DB.AuthFrontendScope", "FrontendScope")
                        .WithMany("AuthFrontendScopePermission")
                        .HasForeignKey("FrontendScopeId")
                        .HasConstraintName("fk_frontend_scope")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthRoleApiScope", b =>
                {
                    b.HasOne("SS.Api.Models.DB.AuthApiScope", "ApiScope")
                        .WithMany("AuthRoleApiScope")
                        .HasForeignKey("ApiScopeId")
                        .HasConstraintName("fk_api_scope_id")
                        .IsRequired();

                    b.HasOne("SS.Api.Models.DB.AuthRole", "Role")
                        .WithMany("AuthRoleApiScope")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_id")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthRoleFrontendScope", b =>
                {
                    b.HasOne("SS.Api.Models.DB.AuthFrontendScope", "FrontendScope")
                        .WithMany("AuthRoleFrontendScope")
                        .HasForeignKey("FrontendScopeId")
                        .HasConstraintName("fk_frontend_scope_id")
                        .IsRequired();

                    b.HasOne("SS.Api.Models.DB.AuthRole", "Role")
                        .WithMany("AuthRoleFrontendScope")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_id")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthRolePermission", b =>
                {
                    b.HasOne("SS.Api.Models.DB.AuthFrontendScopePermission", "FrontendScopePermission")
                        .WithMany("AuthRolePermission")
                        .HasForeignKey("FrontendScopePermissionId")
                        .HasConstraintName("fk_frontend_permission_id");

                    b.HasOne("SS.Api.Models.DB.AuthRoleApiScope", "RoleApiScope")
                        .WithMany("AuthRolePermission")
                        .HasForeignKey("RoleApiScopeId")
                        .HasConstraintName("fk_role_api_scope_id");

                    b.HasOne("SS.Api.Models.DB.AuthRoleFrontendScope", "RoleFrontendScope")
                        .WithMany("AuthRolePermission")
                        .HasForeignKey("RoleFrontendScopeId")
                        .HasConstraintName("fk_role_frontend_scope_id");

                    b.HasOne("SS.Api.Models.DB.AuthRole", "Role")
                        .WithMany("AuthRolePermission")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_id");
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthUser", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Sheriff", "Sheriff")
                        .WithMany("AuthUser")
                        .HasForeignKey("SheriffId")
                        .HasConstraintName("fk_sheriff_id");

                    b.HasOne("SS.Api.Models.DB.AuthUser", "User")
                        .WithOne("InverseUser")
                        .HasForeignKey("SS.Api.Models.DB.AuthUser", "UserId")
                        .HasConstraintName("fk_user_id")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.AuthUserRole", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Location", "Location")
                        .WithMany("AuthUserRole")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_id");

                    b.HasOne("SS.Api.Models.DB.AuthRole", "Role")
                        .WithMany("AuthUserRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_id")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.CourtRoleCode", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Location", "Location")
                        .WithMany("CourtRoleCode")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_id");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Courtroom", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Location", "Location")
                        .WithMany("Courtroom")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_id");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Duty", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Assignment", "Assignment")
                        .WithMany("Duty")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("fk_dty_asn")
                        .IsRequired();

                    b.HasOne("SS.Api.Models.DB.DutyRecurrence", "DutyRecurrence")
                        .WithMany("Duty")
                        .HasForeignKey("DutyRecurrenceId")
                        .HasConstraintName("fk_dty_dtyrc");
                });

            modelBuilder.Entity("SS.Api.Models.DB.DutyRecurrence", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Assignment", "Assignment")
                        .WithMany("DutyRecurrence")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("fk_dtyrc_asn")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.EscortRun", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Location", "Location")
                        .WithMany("EscortRun")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_id");
                });

            modelBuilder.Entity("SS.Api.Models.DB.JailRoleCode", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Location", "Location")
                        .WithMany("JailRoleCode")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_id");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Leave", b =>
                {
                    b.HasOne("SS.Api.Models.DB.LeaveCancelReasonCode", "LeaveCancelReasonCodeNavigation")
                        .WithMany("Leave")
                        .HasForeignKey("LeaveCancelReasonCode")
                        .HasConstraintName("fk_lve_lvcr");

                    b.HasOne("SS.Api.Models.DB.Sheriff", "Sheriff")
                        .WithMany("Leave")
                        .HasForeignKey("SheriffId")
                        .HasConstraintName("fk_lve_shrf")
                        .IsRequired();

                    b.HasOne("SS.Api.Models.DB.LeaveSubCode", "LeaveNavigation")
                        .WithMany("Leave")
                        .HasForeignKey("LeaveCode", "LeaveSubCode")
                        .HasConstraintName("fk_lve_lvsbcd")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.LeaveSubCode", b =>
                {
                    b.HasOne("SS.Api.Models.DB.LeaveCode", "LeaveCodeNavigation")
                        .WithMany("LeaveSubCode")
                        .HasForeignKey("LeaveCode")
                        .HasConstraintName("fk_lvsbcd_lvcd")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.Location", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Region", "Region")
                        .WithMany("LocationNavigation")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_locn_reg")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.OtherAssignCode", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Location", "Location")
                        .WithMany("OtherAssignCode")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_id");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Sheriff", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Location", "CurrentLocation")
                        .WithMany("SheriffCurrentLocation")
                        .HasForeignKey("CurrentLocationId")
                        .HasConstraintName("fk_shr_crlocn");

                    b.HasOne("SS.Api.Models.DB.GenderCode", "GenderCodeNavigation")
                        .WithMany("Sheriff")
                        .HasForeignKey("GenderCode")
                        .HasConstraintName("fk_shrf_gndr");

                    b.HasOne("SS.Api.Models.DB.Location", "HomeLocation")
                        .WithMany("SheriffHomeLocation")
                        .HasForeignKey("HomeLocationId")
                        .HasConstraintName("fk_shr_hmlocn")
                        .IsRequired();

                    b.HasOne("SS.Api.Models.DB.SheriffRankCode", "SheriffRankCodeNavigation")
                        .WithMany("Sheriff")
                        .HasForeignKey("SheriffRankCode")
                        .HasConstraintName("fk_shr_shrkcd")
                        .IsRequired();
                });

            modelBuilder.Entity("SS.Api.Models.DB.SheriffDuty", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Duty", "Duty")
                        .WithMany("SheriffDuty")
                        .HasForeignKey("DutyId")
                        .HasConstraintName("fk_shrdty_dty")
                        .IsRequired();

                    b.HasOne("SS.Api.Models.DB.Sheriff", "Sheriff")
                        .WithMany("SheriffDuty")
                        .HasForeignKey("SheriffId")
                        .HasConstraintName("fk_shrdty_shr");
                });

            modelBuilder.Entity("SS.Api.Models.DB.SheriffLocation", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Location", "Location")
                        .WithMany("SheriffLocation")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_id");

                    b.HasOne("SS.Api.Models.DB.Sheriff", "Sheriff")
                        .WithMany("SheriffLocation")
                        .HasForeignKey("SheriffId")
                        .HasConstraintName("fk_sheriff_id");
                });

            modelBuilder.Entity("SS.Api.Models.DB.Shift", b =>
                {
                    b.HasOne("SS.Api.Models.DB.Assignment", "Assignment")
                        .WithMany("Shift")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("fk_shft_asn");

                    b.HasOne("SS.Api.Models.DB.Location", "Location")
                        .WithMany("Shift")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_shft_locn")
                        .IsRequired();

                    b.HasOne("SS.Api.Models.DB.Sheriff", "Sheriff")
                        .WithMany("Shift")
                        .HasForeignKey("SheriffId")
                        .HasConstraintName("fk_shft_shr");

                    b.HasOne("SS.Api.Models.DB.WorkSectionCode", "WorkSectionCodeNavigation")
                        .WithMany("Shift")
                        .HasForeignKey("WorkSectionCode")
                        .HasConstraintName("fk_shft_wsc");
                });
#pragma warning restore 612, 618
        }
    }
}
